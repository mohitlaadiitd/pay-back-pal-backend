name: Deploy t Docker Image to ECR and update on EC2

on:
  push:
    branches:
      main

jobs:

  push-to-ecr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'microsoft'
          java-version: '21'

      - name: Build docker image and push to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          cd paybackpal
          mvn clean install -Dskiptests -Dmaven.test.skip=true
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: SSH into EC2 and run docker container
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            # Install docker on Amazon Linux 
            sudo yum update -y
            sudo yum install -y docker
            sudo service docker start
            sudo usermod -aG docker ${{ secrets.EC2_USERNAME }} 
            
            # Login to ECR
            export ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
            export ECR_REPOSITORY=${{ secrets.ECR_REPOSITORY }}
            export AWS_REGION=${{ secrets.AWS_REGION }}
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} 
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
            
            # Pull, stop old containers and start new one
            docker pull $ECR_REGISTRY/$ECR_REPOSITORY:latest
            docker ps -q | xargs -r docker stop
            docker ps -a -q | xargs -r docker rm
            docker run -d -p 8080:8080 $ECR_REGISTRY/$ECR_REPOSITORY:latest


























          
